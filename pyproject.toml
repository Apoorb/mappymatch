[tool.black]
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | env
  | venv
)/
'''
include = '\.pyi?$'
line-length = 79
target-version = ['py38', ]

[tool.isort]
profile = "black"
line_length = 79
skip_gitignore = true
filter_files = true

[tool.interrogate]
fail-under = 10 
exclude = ["tests", "docs", "examples", "resources"]
paths = ["mappymatch"]
# Ignore the docs configuration file.
ignore-regex = ["conf.py"]

[tool.coverage.run]
# Ensures coverage for all if, elif, else branches. 
# https://coverage.readthedocs.io/en/6.3.2/branch.html#branch
branch = true

[tool.coverage.report]
precision = 1
fail_under = 50.0
skip_covered = false
skip_empty = true

[tool.tbump]
# Uncomment this if your project is hosted on GitHub:
# github_url = "https://github.com/<user or organization>/<project>/"

[tool.tbump.version]
current = "0.2.2"

# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  '''

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

# For each file to patch, add a [[tool.tbump.file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
[[tool.tbump.file]]
src = "./setup.py"
search = 'version="{current_version}"'
[[tool.tbump.file]]
src = "./docs/source/conf.py"
search = 'full_version = "{current_version}"'

# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made
# [[tool.tbump.before_commit]]


# Or run some commands after the git tag and the branch
# have been pushed:
#  [[tool.tbump.after_push]]
#  name = "publish"
#  cmd = "./publish.sh"
